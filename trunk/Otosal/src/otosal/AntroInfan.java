/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AntroInfan.java
 *
 * Created on 04-nov-2009, 9:30:56
 */

package otosal;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;



/**
 *
 * @author Portatil An
 */




public class AntroInfan extends javax.swing.JDialog {

    static final String ControladorJDBC = "org.sqlite.JDBC";
    static final String baseDatos = "jdbc:sqlite:Otosal.sqlite";
    String sql ="";
    private Connection conexion;
    private Statement instruccion;
    String codCliente;
    BufferedImage grafica = null;
    int cod = new Integer(0);
    int edad = new Integer(0);

    /** Creates new form AntroInfan */
    public AntroInfan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        
        try{
            Class.forName(ControladorJDBC);
            conexion = DriverManager.getConnection(baseDatos);
            instruccion = conexion.createStatement();
            System.out.println("Base de datos cargada");
            ResultSet rs = instruccion.executeQuery("Select id, Nombre, FechNac, sexo  from TempPaci");
            rs.next();
            TFCod.setText(rs.getString(1));
            TFNombre.setText(rs.getString(2));
            TFFechNac.setText(rs.getString(3));
            Integer edad = calcularEdad(TFFechNac.getText());
            TFEdad.setText(edad.toString());
            if (rs.getString(4).equals("Varon"))
                RBVaron.setSelected(true);
            else if (rs.getString(4).equals("Mujer"))
                RBHembra.setSelected(true);
            rs.close();
            instruccion.close();
            //Pongo a editable false para que no se pueda modificar
            TFCod.setEditable(false);
            TFNombre.setEditable(false);
            TFFechNac.setEditable(false);
            TFEdad.setEditable(false);
            RBVaron.setEnabled(false);
            RBHembra.setEnabled(false);
            LLE.setEnabled(false);
            LPE.setEnabled(false);
            LPCE.setEnabled(false);
            LIE.setEnabled(false);
            LPL.setEnabled(false);
            TFLEP.setEditable(false);
            TFLEP50.setEditable(false);
            TFPPE.setEditable(false);
            TFPEP50.setEditable(false);
            TFPCEP.setEditable(false);
            TFPCEP50.setEditable(false);
            TFIEP.setEditable(false);
            TFIEP50.setEditable(false);
            TFPL.setEditable(false);
            TFPLP50.setEditable(false);
            RBLE.setEnabled(false);
            RBPE.setEnabled(false);
            RBPCE.setEnabled(false);
            RBIE.setEnabled(false);
            RBPL.setEnabled(false);
            TFLongitud.requestFocus();
        } catch (Exception e) {}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGSexo = new javax.swing.ButtonGroup();
        BGPaper = new javax.swing.ButtonGroup();
        BGGrafico = new javax.swing.ButtonGroup();
        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TFCod = new javax.swing.JTextField();
        TFNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TFFechNac = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TFEdad = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        RBVaron = new javax.swing.JRadioButton();
        RBHembra = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        TFLongitud = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TFPeso = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TFPerCra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TFIMC = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        RBOrbegozo = new javax.swing.JRadioButton();
        RBCDC = new javax.swing.JRadioButton();
        RBWho = new javax.swing.JRadioButton();
        PGrafico = new javax.swing.JPanel();
        LLE = new javax.swing.JLabel();
        TFLEP = new javax.swing.JTextField();
        LPE = new javax.swing.JLabel();
        TFPPE = new javax.swing.JTextField();
        LPCE = new javax.swing.JLabel();
        TFPCEP = new javax.swing.JTextField();
        LPL = new javax.swing.JLabel();
        TFPL = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        LINLE = new javax.swing.JLabel();
        LINPE = new javax.swing.JLabel();
        LINPCE = new javax.swing.JLabel();
        LINLP = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        LIE = new javax.swing.JLabel();
        TFIEP = new javax.swing.JTextField();
        LINIE = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        TFLEP50 = new javax.swing.JTextField();
        TFPEP50 = new javax.swing.JTextField();
        TFPCEP50 = new javax.swing.JTextField();
        TFIEP50 = new javax.swing.JTextField();
        TFPLP50 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        RBLE = new javax.swing.JRadioButton();
        RBPCE = new javax.swing.JRadioButton();
        RBPE = new javax.swing.JRadioButton();
        RBIE = new javax.swing.JRadioButton();
        RBPL = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        DPImagen = new javax.swing.JDesktopPane();
        jPanel21 = new javax.swing.JPanel();
        BGuardar2 = new javax.swing.JButton();
        BCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(AntroInfan.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jPanel9.setName("jPanel9"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel2.setBackground(resourceMap.getColor("jPanel2.background")); // NOI18N
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel2.setName("jPanel2"); // NOI18N

        jPanel7.setBackground(resourceMap.getColor("jPanel7.background")); // NOI18N
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setName("jPanel7"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        TFCod.setName("TFCod"); // NOI18N

        TFNombre.setName("TFNombre"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        TFFechNac.setName("TFFechNac"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        TFEdad.setName("TFEdad"); // NOI18N

        jPanel6.setBackground(resourceMap.getColor("jPanel6.background")); // NOI18N
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel6.border.title"))); // NOI18N
        jPanel6.setToolTipText(resourceMap.getString("jPanel6.toolTipText")); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N

        RBVaron.setBackground(resourceMap.getColor("RBVaron.background")); // NOI18N
        BGSexo.add(RBVaron);
        RBVaron.setText(resourceMap.getString("RBVaron.text")); // NOI18N
        RBVaron.setName("RBVaron"); // NOI18N

        RBHembra.setBackground(resourceMap.getColor("RBHembra.background")); // NOI18N
        BGSexo.add(RBHembra);
        RBHembra.setText(resourceMap.getString("RBHembra.text")); // NOI18N
        RBHembra.setName("RBHembra"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBVaron)
                    .addComponent(RBHembra))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(RBVaron)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                .addComponent(RBHembra)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TFCod, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(70, 70, 70))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TFFechNac, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(TFCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFFechNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(TFEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(resourceMap.getColor("jPanel8.background")); // NOI18N
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel8.setName("jPanel8"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        TFLongitud.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFLongitud.setName("TFLongitud"); // NOI18N
        TFLongitud.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFLongitudFocusLost(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        TFPeso.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPeso.setName("TFPeso"); // NOI18N
        TFPeso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFPesoFocusLost(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        TFPerCra.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPerCra.setName("TFPerCra"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        TFIMC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFIMC.setName("TFIMC"); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(TFLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TFPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(TFPerCra, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel8)
                        .addGap(31, 31, 31)
                        .addComponent(TFIMC, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TFLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(TFPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(TFPerCra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(TFIMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(resourceMap.getColor("jPanel3.background")); // NOI18N
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setName("jPanel3"); // NOI18N

        jPanel4.setBackground(resourceMap.getColor("jPanel4.background")); // NOI18N
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setName("jPanel4"); // NOI18N

        RBOrbegozo.setBackground(resourceMap.getColor("RBOrbegozo.background")); // NOI18N
        BGPaper.add(RBOrbegozo);
        RBOrbegozo.setText(resourceMap.getString("RBOrbegozo.text")); // NOI18N
        RBOrbegozo.setName("RBOrbegozo"); // NOI18N
        RBOrbegozo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBOrbegozoActionPerformed(evt);
            }
        });

        RBCDC.setBackground(resourceMap.getColor("RBCDC.background")); // NOI18N
        BGPaper.add(RBCDC);
        RBCDC.setText(resourceMap.getString("RBCDC.text")); // NOI18N
        RBCDC.setName("RBCDC"); // NOI18N
        RBCDC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBCDCActionPerformed(evt);
            }
        });

        RBWho.setBackground(resourceMap.getColor("RBWho.background")); // NOI18N
        BGPaper.add(RBWho);
        RBWho.setText(resourceMap.getString("RBWho.text")); // NOI18N
        RBWho.setName("RBWho"); // NOI18N
        RBWho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBWhoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBWho)
                    .addComponent(RBCDC)
                    .addComponent(RBOrbegozo))
                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RBOrbegozo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RBCDC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RBWho)
                .addContainerGap())
        );

        PGrafico.setBackground(resourceMap.getColor("PGrafico.background")); // NOI18N
        PGrafico.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PGrafico.setName("PGrafico"); // NOI18N

        LLE.setText(resourceMap.getString("LLE.text")); // NOI18N
        LLE.setName("LLE"); // NOI18N

        TFLEP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFLEP.setName("TFLEP"); // NOI18N

        LPE.setText(resourceMap.getString("LPE.text")); // NOI18N
        LPE.setName("LPE"); // NOI18N

        TFPPE.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPPE.setName("TFPPE"); // NOI18N

        LPCE.setText(resourceMap.getString("LPCE.text")); // NOI18N
        LPCE.setName("LPCE"); // NOI18N

        TFPCEP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPCEP.setName("TFPCEP"); // NOI18N

        LPL.setText(resourceMap.getString("LPL.text")); // NOI18N
        LPL.setName("LPL"); // NOI18N

        TFPL.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPL.setName("TFPL"); // NOI18N

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        LINLE.setFont(resourceMap.getFont("LINPCE.font")); // NOI18N
        LINLE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LINLE.setName("LINLE"); // NOI18N

        LINPE.setFont(resourceMap.getFont("LINPCE.font")); // NOI18N
        LINPE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LINPE.setName("LINPE"); // NOI18N

        LINPCE.setFont(resourceMap.getFont("LINPCE.font")); // NOI18N
        LINPCE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LINPCE.setName("LINPCE"); // NOI18N

        LINLP.setFont(resourceMap.getFont("LINPCE.font")); // NOI18N
        LINLP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LINLP.setName("LINLP"); // NOI18N

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        LIE.setText(resourceMap.getString("LIE.text")); // NOI18N
        LIE.setName("LIE"); // NOI18N

        TFIEP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFIEP.setName("TFIEP"); // NOI18N

        LINIE.setFont(resourceMap.getFont("LINPCE.font")); // NOI18N
        LINIE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LINIE.setName("LINIE"); // NOI18N

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        TFLEP50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFLEP50.setName("TFLEP50"); // NOI18N

        TFPEP50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPEP50.setName("TFPEP50"); // NOI18N

        TFPCEP50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPCEP50.setName("TFPCEP50"); // NOI18N

        TFIEP50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFIEP50.setName("TFIEP50"); // NOI18N

        TFPLP50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TFPLP50.setName("TFPLP50"); // NOI18N

        javax.swing.GroupLayout PGraficoLayout = new javax.swing.GroupLayout(PGrafico);
        PGrafico.setLayout(PGraficoLayout);
        PGraficoLayout.setHorizontalGroup(
            PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PGraficoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PGraficoLayout.createSequentialGroup()
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LPE)
                            .addComponent(LPCE)
                            .addComponent(LPL)
                            .addComponent(LIE))
                        .addGap(20, 20, 20)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TFPPE)
                            .addComponent(TFPL)
                            .addComponent(TFIEP, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TFPCEP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
                        .addGap(37, 37, 37))
                    .addGroup(PGraficoLayout.createSequentialGroup()
                        .addComponent(LLE)
                        .addGap(63, 63, 63)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TFLEP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
                        .addGap(37, 37, 37)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PGraficoLayout.createSequentialGroup()
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TFPEP50)
                            .addComponent(TFPLP50)
                            .addComponent(TFIEP50, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TFPCEP50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addComponent(TFLEP50, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LINLP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LINIE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LINPCE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(LINPE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LINLE, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                .addContainerGap())
        );
        PGraficoLayout.setVerticalGroup(
            PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PGraficoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PGraficoLayout.createSequentialGroup()
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFLEP50)
                        .addGap(18, 18, 18)
                        .addComponent(TFPEP50)
                        .addGap(18, 18, 18)
                        .addComponent(TFPCEP50)
                        .addGap(18, 18, 18)
                        .addComponent(TFIEP50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TFPLP50, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PGraficoLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(LINLE, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(LINPE, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(LINPCE, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(LINIE, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(LINLP, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PGraficoLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LLE)
                            .addComponent(TFLEP))
                        .addGap(18, 18, 18)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LPE)
                            .addComponent(TFPPE))
                        .addGap(18, 18, 18)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LPCE)
                            .addComponent(TFPCEP))
                        .addGap(18, 18, 18)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LIE)
                            .addComponent(TFIEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LPL)
                            .addComponent(TFPL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addComponent(PGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(resourceMap.getColor("jPanel5.background")); // NOI18N
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setName("jPanel5"); // NOI18N

        RBLE.setBackground(resourceMap.getColor("RBLE.background")); // NOI18N
        BGGrafico.add(RBLE);
        RBLE.setText(resourceMap.getString("RBLE.text")); // NOI18N
        RBLE.setName("RBLE"); // NOI18N
        RBLE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBLEActionPerformed(evt);
            }
        });

        RBPCE.setBackground(resourceMap.getColor("RBPCE.background")); // NOI18N
        BGGrafico.add(RBPCE);
        RBPCE.setText(resourceMap.getString("RBPCE.text")); // NOI18N
        RBPCE.setName("RBPCE"); // NOI18N
        RBPCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBPCEActionPerformed(evt);
            }
        });

        RBPE.setBackground(resourceMap.getColor("RBPE.background")); // NOI18N
        BGGrafico.add(RBPE);
        RBPE.setText(resourceMap.getString("RBPE.text")); // NOI18N
        RBPE.setName("RBPE"); // NOI18N
        RBPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBPEActionPerformed(evt);
            }
        });

        RBIE.setBackground(resourceMap.getColor("RBIE.background")); // NOI18N
        BGGrafico.add(RBIE);
        RBIE.setText(resourceMap.getString("RBIE.text")); // NOI18N
        RBIE.setName("RBIE"); // NOI18N
        RBIE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBIEActionPerformed(evt);
            }
        });

        RBPL.setBackground(resourceMap.getColor("RBPL.background")); // NOI18N
        BGGrafico.add(RBPL);
        RBPL.setText(resourceMap.getString("RBPL.text")); // NOI18N
        RBPL.setName("RBPL"); // NOI18N
        RBPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBPLActionPerformed(evt);
            }
        });

        jLabel13.setFont(resourceMap.getFont("jLabel13.font")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBLE)
                    .addComponent(RBPL)
                    .addComponent(RBPCE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBIE)
                    .addComponent(RBPE))
                .addGap(49, 49, 49))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBLE)
                    .addComponent(RBPE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBPCE)
                    .addComponent(RBIE))
                .addGap(18, 18, 18)
                .addComponent(RBPL)
                .addGap(18, 18, 18))
        );

        DPImagen.setBackground(resourceMap.getColor("DPImagen.background")); // NOI18N
        DPImagen.setName("DPImagen"); // NOI18N

        jPanel21.setBackground(resourceMap.getColor("jPanel21.background")); // NOI18N
        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel21.setName("jPanel21"); // NOI18N

        BGuardar2.setText(resourceMap.getString("BGuardar2.text")); // NOI18N
        BGuardar2.setName("BGuardar2"); // NOI18N
        BGuardar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardar2ActionPerformed(evt);
            }
        });

        BCerrar.setText(resourceMap.getString("BCerrar.text")); // NOI18N
        BCerrar.setName("BCerrar"); // NOI18N
        BCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BGuardar2)
                .addGap(18, 18, 18)
                .addComponent(BCerrar)
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BCerrar)
                    .addComponent(BGuardar2))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DPImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DPImagen))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 1098, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BGuardar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardar2ActionPerformed

}//GEN-LAST:event_BGuardar2ActionPerformed

    private void BCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCerrarActionPerformed
        dispose();
}//GEN-LAST:event_BCerrarActionPerformed

    private void TFLongitudFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFLongitudFocusLost
        //Compruebo que el campo longitud y peso tenga valor y si lo tiene calculo el imc
        if (!TFLongitud.getText().equals("") && !TFPeso.getText().equals("")) {
            Double imc;
            imc= (Double.valueOf(TFPeso.getText().trim()).doubleValue() / ((Double.valueOf(TFLongitud.getText().trim()).doubleValue()/100)*(Double.valueOf(TFLongitud.getText().trim()).doubleValue()/100)) );
            int numero = (int) (imc * 100);
            System.out.println(numero);
            imc =  numero / 100. ;
            System.out.println(imc);
            TFIMC.setText(Double.toString(imc));
            TFIMC.setEditable(false);
        }
}//GEN-LAST:event_TFLongitudFocusLost

    private void TFPesoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFPesoFocusLost
        //Compruebo que el campo longitud y peso tenga valor y si lo tiene calculo el imc
        if (!TFLongitud.getText().equals("") && !TFPeso.getText().equals("")) {
            Double imc;
            imc= (Double.valueOf(TFPeso.getText().trim()).doubleValue() / ((Double.valueOf(TFLongitud.getText().trim()).doubleValue()/100)*(Double.valueOf(TFLongitud.getText().trim()).doubleValue()/100)) );
            int numero = (int) (imc * 100);
            System.out.println(numero);
            imc =  numero / 100. ;
            System.out.println(imc);
            TFIMC.setText(Double.toString(imc));
            TFIMC.setEditable(false);
        }
}//GEN-LAST:event_TFPesoFocusLost

    private void RBOrbegozoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBOrbegozoActionPerformed
        try {
            if (RBOrbegozo.isSelected()) {
                //Pongo el campo a enabled false o true segun sea para que no se vea o se vea
                LPL.setEnabled(false);
                TFPL.setEnabled(false);
                TFPLP50.setEnabled(false);
                LLE.setEnabled(true);
                LPE.setEnabled(true);
                LPCE.setEnabled(true);
                LIE.setEnabled(true);
                TFIEP50.setEnabled(true);
                TFIEP.setEnabled(true);
                RBLE.setEnabled(true);
                RBPE.setEnabled(true);
                RBPCE.setEnabled(true);
                RBIE.setEnabled(true);
                RBPL.setEnabled(false);
                LINLP.setText("");
                TFPL.setText("");
                TFPLP50.setText("");
                if (!TFPeso.getText().equals("") && !TFLongitud.getText().equals("") && TFPerCra.getText().equals("")) {
                    edad=calcularMeses(TFFechNac.getText());
                    ResultSet rs = instruccion.executeQuery("select id, edad from InfaOrbegozoV");
                    while(rs.next()){
                        if (rs.getInt(2) > edad) {
                            cod=rs.getInt(1);
                            break;
                        } else if (rs.getInt(2) == edad) {
                            cod=rs.getInt(1);
                            break;
                        }
                    }
                    rs.close();
                    if (RBVaron.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaOrbegozoV where id = " + cod );
                    else if (RBHembra.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaOrbegozoM where id = " + cod );
                    rs.next();
                    TFLEP50.setText(rs.getString(3));
                    TFPEP50.setText(rs.getString(6));
                    TFPCEP50.setText(rs.getString(9));
                    TFIEP50.setText(rs.getString(12));
                    Double Lon = Double.valueOf(TFLongitud.getText().trim()).doubleValue();
                    if ( Lon < rs.getDouble(2)) {
                        LINLE.setText("Desnutrición");
                        TFLEP.setText("< P3");
                    }
                    if (rs.getDouble(2) == Lon ) {
                        LINLE.setText("Normal");
                        TFLEP.setText("P3");
                    }
                    if (rs.getDouble(3) > Lon  && Lon > rs.getDouble(2)) {
                        LINLE.setText("Normal");
                        TFLEP.setText("P3 - P50");
                    }
                    if (rs.getDouble(3) == Lon ) {
                        LINLE.setText("Normal");
                        TFLEP.setText("P50");
                    }
                    if (rs.getDouble(3) < Lon  && Lon < rs.getDouble(4)) {
                        LINLE.setText("Normal");
                        TFLEP.setText("P50 - P97");
                    }
                    if (rs.getDouble(4) == Lon ) {
                        LINLE.setText("Normal");
                        TFLEP.setText("P97");
                    }
                    if (rs.getDouble(4) < Lon) {
                        LINLE.setText("Alto");
                        TFLEP.setText("> P97");
                    }
                    Double Peso = Double.valueOf(TFPeso.getText().trim()).doubleValue();
                    if ( Peso < rs.getDouble(5)) {
                        LINPE.setText("Desnutrición");
                        TFPPE.setText("< P3");
                    }
                    if (rs.getDouble(5) == Peso ) {
                        LINPE.setText("Normal");
                        TFPPE.setText("P3");
                    }
                    if (rs.getDouble(6) > Peso  && Peso > rs.getDouble(5)) {
                        LINPE.setText("Normal");
                        TFPPE.setText("P3 - P50");
                    }
                    if (rs.getDouble(6) == Peso ) {
                        LINPE.setText("Normal");
                        TFPPE.setText("P50");
                    }
                    if (rs.getDouble(6) < Peso && Peso < rs.getDouble(7)) {
                        LINPE.setText("Normal");
                        TFPPE.setText("P50 - P97");
                    }
                    if (rs.getDouble(7) == Peso ) {
                        LINPE.setText("Normal");
                        TFPPE.setText("P97");
                    }
                    if (rs.getDouble(7) < Peso) {
                        LINPE.setText("Obesidad");
                        TFPPE.setText("> P97");
                    }
                    Double PeCra = Double.valueOf(TFPerCra.getText().trim()).doubleValue();
                    if ( PeCra < rs.getDouble(8)) {
                        LINPCE.setText("Desnutrición");
                        TFPCEP.setText("< P3");
                    }
                    if (rs.getDouble(8) == PeCra ) {
                        LINPCE.setText("Normal");
                        TFPCEP.setText("P3");
                    }
                    if (rs.getDouble(9) > PeCra  && PeCra >= rs.getDouble(8)) {
                        LINPCE.setText("Normal");
                        TFPCEP.setText("P3 - P50");
                    }
                    if (rs.getDouble(9) == PeCra ) {
                        LINPCE.setText("Normal");
                        TFPCEP.setText("P50");
                    }
                    if (rs.getDouble(9) < PeCra && PeCra < rs.getDouble(10)) {
                        LINPCE.setText("Normal");
                        TFPCEP.setText("P50 - P97");
                    }
                    if (rs.getDouble(10) == PeCra ) {
                        LINPCE.setText("Normal");
                        TFPCEP.setText("P97");
                    }
                    if (rs.getDouble(10) < PeCra) {
                        LINPCE.setText("Obesidad");
                        TFPCEP.setText("> P97");
                    }
                    Double IMC = Double.valueOf(TFIMC.getText().trim()).doubleValue();
                    if ( IMC < rs.getDouble(11)) {
                        LINIE.setText("Desnutrición");
                        TFIEP.setText("< P3");
                    }
                    if (rs.getDouble(11) == IMC ) {
                        LINIE.setText("Normal");
                        TFIEP.setText("P3");
                    }
                    if (rs.getDouble(12) > IMC  && IMC > rs.getDouble(11)) {
                        LINIE.setText("Normal");
                        TFIEP.setText("P3 - P50");
                    }
                    if (rs.getDouble(12) == IMC ) {
                        LINIE.setText("Normal");
                        TFIEP.setText("P50");
                    }
                    if (rs.getDouble(12) < IMC && IMC < rs.getDouble(13)) {
                        LINIE.setText("Normal");
                        TFIEP.setText("P50 - P85");
                    }
                    if (rs.getDouble(13) == IMC ) {
                        LINIE.setText("Normal");
                        TFIEP.setText("P85");
                    }
                    if (rs.getDouble(13) < IMC && IMC < rs.getDouble(14)) {
                        LINIE.setText("Sobrepeso");
                        TFIEP.setText("P85 - P95");
                    }
                    if (rs.getDouble(14) == IMC ) {
                        LINIE.setText("Sobrepeso");
                        TFIEP.setText("P95");
                    }
                    if (rs.getDouble(14) < IMC && IMC < rs.getDouble(15)) {
                        LINIE.setText("Obesidad");
                        TFIEP.setText("P95 - P97");
                    }
                    if (rs.getDouble(15) == IMC ) {
                        LINIE.setText("Obesidad");
                        TFIEP.setText("97");
                    }
                    if (rs.getDouble(15)< IMC) {
                        LINIE.setText("Obesidad");
                        TFIEP.setText("> P97");
                    }
                    rs.close();
                    instruccion.close();
                } else {
                    JOptionPane.showMessageDialog(null, "Tienes que rellenar todos los campos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
                    LPL.setEnabled(false);
                    TFPL.setEnabled(false);
                    TFPLP50.setEnabled(false);
                    LLE.setEnabled(false);
                    LPE.setEnabled(false);
                    LPCE.setEnabled(false);
                    LIE.setEnabled(false);
                    TFIEP50.setEnabled(false);
                    TFIEP.setEnabled(false);
                    RBLE.setEnabled(false);
                    RBPE.setEnabled(false);
                    RBPCE.setEnabled(false);
                    RBIE.setEnabled(false);
                    RBPL.setEnabled(false);
                    TFLongitud.requestFocus();
                    TFLongitud.selectAll();
                }
            }
        } catch(Exception e) {System.out.println(e);}
}//GEN-LAST:event_RBOrbegozoActionPerformed

    private void RBCDCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBCDCActionPerformed
        try {
            if (RBCDC.isSelected()) {
                LPL.setEnabled(true);
                TFPL.setEnabled(true);
                TFPLP50.setEnabled(true);
                TFIEP50.setText("");
                TFIEP.setText("");
                LINIE.setText("");
                LLE.setEnabled(true);
                LPE.setEnabled(true);
                LPCE.setEnabled(true);
                LIE.setEnabled(false);
                TFIEP50.setEnabled(false);
                TFIEP.setEnabled(false);
                RBLE.setEnabled(true);
                RBPE.setEnabled(true);
                RBPCE.setEnabled(true);
                RBIE.setEnabled(false);
                RBPL.setEnabled(true);
                if (!TFPeso.getText().equals("") && !TFLongitud.getText().equals("") && TFPerCra.getText().equals("")) {

                    edad=calcularMeses(TFFechNac.getText());

                    ResultSet rs = instruccion.executeQuery("select id, edad from InfaCDCV1");
                    while(rs.next()){
                        if (rs.getInt(2) > edad) {
                            cod=rs.getInt(1);
                            break;
                        } else if (rs.getInt(2) == edad) {
                            cod=rs.getInt(1);
                            break;
                        }
                    }
                    rs.close();
                    if (RBVaron.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaCDCV1 where id = " + cod );
                    else if (RBHembra.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaCDCM1 where id = " + cod );
                    rs.next();
                    TFLEP50.setText(rs.getString(7));
                    TFPEP50.setText(rs.getString(16));
                    TFPCEP50.setText(rs.getString(25));

                    if (!TFLongitud.getText().equals("")) {
                        Double Lon = Double.valueOf(TFLongitud.getText().trim()).doubleValue();
                        if ( Lon < rs.getDouble(3)) {
                            LINLE.setText("Desnutrición");
                            TFLEP.setText("< P3");
                        }
                        if (rs.getDouble(3) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P3");
                        }
                        if (rs.getDouble(4) > Lon  && Lon > rs.getDouble(3)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P3 - P5");
                        }
                        if (rs.getDouble(4) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P5");
                        }
                        if (rs.getDouble(4) < Lon  && Lon < rs.getDouble(5)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P5 - P10");
                        }
                        if (rs.getDouble(5) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P10");
                        }
                        if (rs.getDouble(5) < Lon  && Lon < rs.getDouble(6)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P10 - P25");
                        }
                        if (rs.getDouble(6) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P25");
                        }
                        if (rs.getDouble(6) < Lon  && Lon < rs.getDouble(7)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P25 - P50");
                        }
                        if (rs.getDouble(7) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P50");
                        }
                        if (rs.getDouble(7) < Lon  && Lon < rs.getDouble(8)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P50 - P75");
                        }
                        if (rs.getDouble(8) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P75");
                        }
                        if (rs.getDouble(8) < Lon  && Lon < rs.getDouble(9)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P75 - P90");
                        }
                        if (rs.getDouble(9) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P90");
                        }
                        if (rs.getDouble(9) < Lon  && Lon < rs.getDouble(10)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P90 - P95");
                        }
                        if (rs.getDouble(10) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P95");
                        }
                        if (rs.getDouble(10) < Lon  && Lon < rs.getDouble(11)) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P95 - P97");
                        }
                        if (rs.getDouble(11) == Lon ) {
                            LINLE.setText("Normal");
                            TFLEP.setText("P97");
                        }
                        if (rs.getDouble(11) < Lon) {
                            LINLE.setText("Alto");
                            TFLEP.setText("> P97");
                        }
                    }
                    if (!TFPeso.getText().equals("")) {
                        Double Peso = Double.valueOf(TFPeso.getText().trim()).doubleValue();
                        if ( Peso < rs.getDouble(12)) {
                            LINPE.setText("Desnutrición");
                            TFPPE.setText("< P3");
                        }
                        if (rs.getDouble(12) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P3");
                        }
                        if (rs.getDouble(13) > Peso && Peso > rs.getDouble(12)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P3 - P5");
                        }
                        if (rs.getDouble(13) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P5");
                        }
                        if (rs.getDouble(13) < Peso && Peso < rs.getDouble(14)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P5 - P10");
                        }
                        if (rs.getDouble(14) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P10");
                        }
                        if (rs.getDouble(14) < Peso && Peso < rs.getDouble(15)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P10 - P25");
                        }
                        if (rs.getDouble(15) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P25");
                        }
                        if (rs.getDouble(15) < Peso  && Peso < rs.getDouble(16)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P25 - P50");
                        }
                        if (rs.getDouble(16) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P50");
                        }
                        if (rs.getDouble(16) < Peso  && Peso < rs.getDouble(17)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P50 - P75");
                        }
                        if (rs.getDouble(17) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P75");
                        }
                        if (rs.getDouble(17) < Peso && Peso < rs.getDouble(18)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P75 - P90");
                        }
                        if (rs.getDouble(18) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P90");
                        }
                        if (rs.getDouble(18) < Peso && Peso < rs.getDouble(19)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P90 - P95");
                        }
                        if (rs.getDouble(19) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P95");
                        }
                        if (rs.getDouble(19) < Peso && Peso < rs.getDouble(20)) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P95 - P97");
                        }
                        if (rs.getDouble(20) == Peso ) {
                            LINPE.setText("Normal");
                            TFPPE.setText("P97");
                        }
                        if (rs.getDouble(20) < Peso) {
                            LINPE.setText("Obesidad");
                            TFPPE.setText("> P97");
                        }
                    }
                    if (!TFPerCra.getText().equals("")) {
                        Double PeCra = Double.valueOf(TFPerCra.getText().trim()).doubleValue();
                        if ( PeCra < rs.getDouble(21)) {
                            LINPCE.setText("Desnutrición");
                            TFPCEP.setText("< P3");
                        }
                        if (rs.getDouble(21) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P3");
                        }
                        if (rs.getDouble(22) > PeCra && PeCra > rs.getDouble(21)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P3 - P5");
                        }
                        if (rs.getDouble(22) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P5");
                        }
                        if (rs.getDouble(22) < PeCra && PeCra < rs.getDouble(23)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P5 - P10");
                        }
                        if (rs.getDouble(23) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P10");
                        }
                        if (rs.getDouble(23) < PeCra && PeCra < rs.getDouble(24)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P10 - P25");
                        }
                        if (rs.getDouble(24) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P25");
                        }
                        if (rs.getDouble(24) < PeCra && PeCra < rs.getDouble(25)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P25 - P50");
                        }
                        if (rs.getDouble(25) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P50");
                        }
                        if (rs.getDouble(25) < PeCra  && PeCra < rs.getDouble(26)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P50 - P75");
                        }
                        if (rs.getDouble(26) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P75");
                        }
                        if (rs.getDouble(26) < PeCra && PeCra < rs.getDouble(27)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P75 - P90");
                        }
                        if (rs.getDouble(27) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P90");
                        }
                        if (rs.getDouble(27) < PeCra && PeCra < rs.getDouble(28)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P90 - P95");
                        }
                        if (rs.getDouble(28) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P95");
                        }
                        if (rs.getDouble(28) < PeCra && PeCra < rs.getDouble(29)) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P95 - P97");
                        }
                        if (rs.getDouble(29) == PeCra ) {
                            LINPCE.setText("Normal");
                            TFPCEP.setText("P97");
                        }
                        if (rs.getDouble(29) < PeCra) {
                            LINPCE.setText("Obesidad");
                            TFPCEP.setText("> P97");
                        }
                    }
                    rs.close();
                    rs = instruccion.executeQuery("select id, Altura from InfaCDCV2");
                    Double Longitud = Double.valueOf(TFLongitud.getText().trim()).doubleValue();
                    while(rs.next()){
                        if (rs.getDouble(2) > Longitud) {
                            cod=rs.getInt(1);
                            break;
                        } else if (rs.getDouble(2) == Longitud) {
                            cod=rs.getInt(1);
                            break;
                        }
                    }
                    rs.close();
                    if (RBVaron.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaCDCV2 where id = " + cod );
                    else if (RBHembra.isSelected())
                        rs = instruccion.executeQuery("Select * from InfaCDCM2 where id = " + cod );
                    rs.next();
                    TFPLP50.setText(rs.getString(7));
                    Double Pes = Double.valueOf(TFPeso.getText().trim()).doubleValue();
                    if ( Pes < rs.getDouble(3)) {
                        LINLP.setText("Desnutrición");
                        TFPL.setText("< P3");
                    }
                    if (rs.getDouble(3) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P3");
                    }
                    if (rs.getDouble(4) > Pes && Pes > rs.getDouble(3)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P3 - P5");
                    }
                    if (rs.getDouble(4) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P5");
                    }
                    if (rs.getDouble(4) < Pes && Pes < rs.getDouble(5)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P5 - P10");
                    }
                    if (rs.getDouble(5) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P10");
                    }
                    if (rs.getDouble(5) < Pes && Pes < rs.getDouble(6)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P10 - P25");
                    }
                    if (rs.getDouble(6) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P25");
                    }
                    if (rs.getDouble(6) < Pes  && Pes < rs.getDouble(7)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P25 - P50");
                    }
                    if (rs.getDouble(7) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P50");
                    }
                    if (rs.getDouble(7) < Pes  && Pes < rs.getDouble(8)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P50 - P75");
                    }
                    if (rs.getDouble(8) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P75");
                    }
                    if (rs.getDouble(8) < Pes && Pes < rs.getDouble(9)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P75 - P90");
                    }
                    if (rs.getDouble(9) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P90");
                    }
                    if (rs.getDouble(9) < Pes && Pes < rs.getDouble(10)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P90 - P95");
                    }
                    if (rs.getDouble(10) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P95");
                    }
                    if (rs.getDouble(10) < Pes && Pes < rs.getDouble(11)) {
                        LINLP.setText("Normal");
                        TFPL.setText("P95 - P97");
                    }
                    if (rs.getDouble(11) == Pes ) {
                        LINLP.setText("Normal");
                        TFPL.setText("P97");
                    }
                    if (rs.getDouble(11) < Pes) {
                        LINLP.setText("Obesidad");
                        TFPL.setText("> P97");
                    }
                rs.close();
                instruccion.close();
            } else {
                JOptionPane.showMessageDialog(null, "Tienes que rellenar todos los campos",
                "Otoño Salud", JOptionPane.ERROR_MESSAGE);
                LPL.setEnabled(false);
                TFPL.setEnabled(false);
                TFPLP50.setEnabled(false);
                LLE.setEnabled(false);
                LPE.setEnabled(false);
                LPCE.setEnabled(false);
                LIE.setEnabled(false);
                TFIEP50.setEnabled(false);
                TFIEP.setEnabled(false);
                RBLE.setEnabled(false);
                RBPE.setEnabled(false);
                RBPCE.setEnabled(false);
                RBIE.setEnabled(false);
                RBPL.setEnabled(false);
                TFLongitud.requestFocus();
                TFLongitud.selectAll();
            }
          }
        }catch(Exception e) {System.out.println(e);}
}//GEN-LAST:event_RBCDCActionPerformed

    private void RBWhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBWhoActionPerformed
        try {
            if (RBWho.isSelected()) {
                LPL.setEnabled(true);
                TFPL.setEnabled(true);
                TFPLP50.setEnabled(true);
                LLE.setEnabled(true);
                LPE.setEnabled(true);
                LPCE.setEnabled(true);
                LIE.setEnabled(true);
                TFIEP50.setEnabled(true);
                TFIEP.setEnabled(true);
                RBLE.setEnabled(true);
                RBPE.setEnabled(true);
                RBPCE.setEnabled(true);
                RBIE.setEnabled(true);
                RBPL.setEnabled(true);
                    if (!TFPeso.getText().equals("") && !TFLongitud.getText().equals("") && !TFPerCra.getText().equals("")) {
                        edad = calcularMeses(TFFechNac.getText());

                        ResultSet rs = instruccion.executeQuery("select id, edad from InfaWHOV1");
                        while(rs.next()){
                            if (rs.getInt(2) > edad) {
                                cod=rs.getInt(1);
                                break;
                            } else if (rs.getInt(2) == edad) {
                                cod=rs.getInt(1);
                                break;
                            }
                        }
                        rs.close();
                        if (RBVaron.isSelected())
                            rs = instruccion.executeQuery("Select * from InfaWHOV1 where id = " + cod );
                        else if (RBHembra.isSelected())
                            rs = instruccion.executeQuery("Select * from InfaWHOM1 where id = " + cod );
                        rs.next();
                        TFLEP50.setText(rs.getString(5));
                        TFPEP50.setText(rs.getString(10));
                        TFPCEP50.setText(rs.getString(20));
                        TFIEP50.setText(rs.getString(15));
                        if (!TFLongitud.getText().equals("")) {
                            Double Lon = Double.valueOf(TFLongitud.getText().trim()).doubleValue();
                            if (Lon < rs.getDouble(3)) {
                                LINLE.setText("Desnutrición");
                                TFLEP.setText("< P3");
                            }
                            if (Lon== rs.getDouble(3)) {
                                LINLE.setText("Peligro Desnutrición");
                                TFLEP.setText("P3");
                            }
                            if (rs.getDouble(3) < Lon && Lon < rs.getDouble(4)) {
                                LINLE.setText("Peligro Desnutrición");
                                TFLEP.setText("P3 - P15");
                            }
                            if (Lon == rs.getDouble(4)) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P15");
                            }
                            if (rs.getDouble(4)< Lon && Lon < rs.getDouble(5)) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P15 - P50");
                            }
                            if (Lon == rs.getDouble(5)) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P50");
                            }
                            if (rs.getDouble(5)< Lon && Lon < rs.getDouble(6)) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P50 - P85");
                            }
                            if (rs.getDouble(6) == Lon) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P85");
                            }
                            if (rs.getDouble(6) < Lon && Lon < rs.getDouble(7)) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P85 - P97");
                            }
                            if (rs.getDouble(7) == Lon) {
                                LINLE.setText("Normal");
                                TFLEP.setText("P97");
                            }
                            if (rs.getDouble(7) < Lon) {
                                LINLE.setText("Alto");
                                TFLEP.setText("> P97");
                            }
                        }
                        if (!TFPeso.getText().equals("")) {
                            Double Peso = Double.valueOf(TFPeso.getText().trim()).doubleValue();
                            if (Peso < rs.getDouble(8)) {
                                LINPE.setText("Desnutrición");
                                TFPPE.setText("< P3");
                            }
                            if (Peso== rs.getDouble(8)) {
                                LINPE.setText("Peligro Desnutrición");
                                TFPPE.setText("P3");
                            }
                            if (rs.getDouble(8) < Peso && Peso < rs.getDouble(9)) {
                                LINPE.setText("Peligro Desnutrición");
                                TFPPE.setText("P3 - P15");
                            }
                            if (Peso == rs.getDouble(9)) {
                                LINPE.setText("Normal");
                                TFPPE.setText("P15");
                            }
                            if (rs.getDouble(9)< Peso && Peso < rs.getDouble(10)) {
                                LINPE.setText("Normal");
                                TFPPE.setText("P15 - P50");
                            }
                            if (Peso == rs.getDouble(10)) {
                                LINPE.setText("Normal");
                                TFPPE.setText("P50");
                            }
                            if (rs.getDouble(10)< Peso && Peso < rs.getDouble(11)) {
                                LINPE.setText("Normal");
                                TFPPE.setText("P50 - P85");
                            }
                            if (rs.getDouble(11) == Peso) {
                                LINPE.setText("Normal");
                                TFPPE.setText("P85");
                            }
                            if (rs.getDouble(11) < Peso && Peso < rs.getDouble(12)) {
                                LINPE.setText("Sobrepeso");
                                TFPPE.setText("P85 - P97");
                            }
                            if (rs.getDouble(12) == Peso) {
                                LINPE.setText("Sobrepeso");
                                TFPPE.setText("P97");
                            }
                            if (rs.getDouble(12) < Peso) {
                                LINPE.setText("Obesisdad");
                                TFPPE.setText("> P97");
                            }
                        }
                        if (!TFIMC.getText().equals("")) {
                            Double imc = Double.valueOf(TFIMC.getText().trim()).doubleValue();
                            if (imc < rs.getDouble(13)) {
                                LINIE.setText("Desnutrición");
                                TFIEP.setText("< P3");
                            }
                            if (imc== rs.getDouble(13)) {
                                LINIE.setText("Peligro Desnutrición");
                                TFIEP.setText("P3");
                            }
                            if (rs.getDouble(13) < imc && imc < rs.getDouble(14)) {
                                LINIE.setText("Peligro Desnutrición");
                                TFIEP.setText("P3 - P15");
                            }
                            if (imc == rs.getDouble(14)) {
                                LINIE.setText("Normal");
                                TFIEP.setText("P15");
                            }
                            if (rs.getDouble(14)< imc && imc < rs.getDouble(15)) {
                                LINIE.setText("Normal");
                                TFIEP.setText("P15 - P50");
                            }
                            if (imc == rs.getDouble(15)) {
                                LINIE.setText("Normal");
                                TFIEP.setText("P50");
                            }
                            if (rs.getDouble(15)< imc && imc < rs.getDouble(16)) {
                                LINIE.setText("Normal");
                                TFIEP.setText("P50 - P85");
                            }
                            if (rs.getDouble(16) == imc) {
                                LINIE.setText("Normal");
                                TFIEP.setText("P85");
                            }
                            if (rs.getDouble(16) < imc && imc < rs.getDouble(17)) {
                                LINIE.setText("Sobrepeso");
                                TFIEP.setText("P85 - P97");
                            }
                            if (rs.getDouble(17) == imc) {
                                LINIE.setText("Sobrepeso");
                                TFIEP.setText("P97");
                            }
                            if (rs.getDouble(17) < imc) {
                                LINIE.setText("Obesisdad");
                                TFIEP.setText("> P97");
                            }
                        }
                        if (!TFPerCra.getText().equals("")) {
                            Double pC = Double.valueOf(TFPerCra.getText().trim()).doubleValue();
                            if (pC < rs.getDouble(18)) {
                                LINPCE.setText("Desnutrición");
                                TFPCEP.setText("< P3");
                            }
                            if (pC== rs.getDouble(18)) {
                                LINPCE.setText("Peligro Desnutrición");
                                TFPCEP.setText("P3");
                            }
                            if (rs.getDouble(18) < pC && pC < rs.getDouble(19)) {
                                LINPCE.setText("Peligro Desnutrición");
                                TFPCEP.setText("P3 - P15");
                            }
                            if (pC == rs.getDouble(19)) {
                                LINPCE.setText("Normal");
                                TFPCEP.setText("P15");
                            }
                            if (rs.getDouble(19)< pC && pC < rs.getDouble(20)) {
                                LINPCE.setText("Normal");
                                TFPCEP.setText("P15 - P50");
                            }
                            if (pC == rs.getDouble(20)) {
                                LINPCE.setText("Normal");
                                TFPCEP.setText("P50");
                            }
                            if (rs.getDouble(20)< pC && pC < rs.getDouble(21)) {
                                LINPCE.setText("Normal");
                                TFPCEP.setText("P50 - P85");
                            }
                            if (rs.getDouble(21) == pC) {
                                LINPCE.setText("Normal");
                                TFPCEP.setText("P85");
                            }
                            if (rs.getDouble(21) < pC && pC < rs.getDouble(22)) {
                                LINPCE.setText("Sobrepeso");
                                TFPCEP.setText("P85 - P97");
                            }
                            if (rs.getDouble(22) == pC) {
                                LINPCE.setText("Sobrepeso");
                                TFPCEP.setText("P97");
                            }
                            if (rs.getDouble(22) < pC) {
                                LINPCE.setText("Obesisdad");
                                TFPCEP.setText("> P97");
                            }
                        }
                        rs.close();
                        rs = instruccion.executeQuery("select id, Altura from InfaWHOV2");
                        Double Longitud = Double.valueOf(TFLongitud.getText().trim()).doubleValue();
                        while(rs.next()){
                            if (rs.getDouble(2) > Longitud) {
                                cod=rs.getInt(1);
                                break;
                            } else if (rs.getDouble(2) == Longitud) {
                                cod=rs.getInt(1);
                                break;
                            }
                        }
                        rs.close();
                        if (RBVaron.isSelected())
                            rs = instruccion.executeQuery("Select * from InfaWHOV2 where id = " + cod );
                        else if (RBHembra.isSelected())
                            rs = instruccion.executeQuery("Select * from InfaWHOM2 where id = " + cod );
                        rs.next();
                        TFPLP50.setText(rs.getString(5));

                        Double Pes = Double.valueOf(TFPeso.getText().trim()).doubleValue();
                        if ( Pes < rs.getDouble(3)) {
                            LINLP.setText("Desnutrición");
                            TFPL.setText("< P3");
                        }
                        if (Pes == rs.getDouble(3)) {
                            LINLP.setText("Peligro Desnutrición");
                            TFPL.setText("P3");
                        }
                        if (rs.getDouble(3) < Pes && Pes < rs.getDouble(4)) {
                            LINLP.setText("Peligro Desnutrición");
                            TFPL.setText("P3 - P15");
                        }
                        if (Pes == rs.getDouble(4)) {
                            LINLP.setText("Normal");
                            TFPL.setText("P15");
                        }
                        if (rs.getDouble(4)< Pes && Pes < rs.getDouble(5)) {
                            LINLP.setText("Normal");
                            TFPL.setText("P15 - P50");
                        }
                        if (Pes == rs.getDouble(5)) {
                            LINLP.setText("Normal");
                            TFPL.setText("P50");
                        }
                        if (rs.getDouble(5)< Pes && Pes < rs.getDouble(6)) {
                            LINLP.setText("Normal");
                            TFPL.setText("P50 - P85");
                        }
                        if (rs.getDouble(6) == Pes) {
                            LINLP.setText("Normal");
                            TFPL.setText("P85");
                        }
                        if (rs.getDouble(6) < Pes && Pes < rs.getDouble(7)) {
                            LINLP.setText("Sobrepeso");
                            TFPL.setText("P85 - P97");
                        }
                        if (rs.getDouble(7) == Pes) {
                            LINLP.setText("Sobrepeso");
                            TFPL.setText("P97");
                        }
                        if (rs.getDouble(7) < Pes) {
                            LINLP.setText("Obesisdad");
                            TFPL.setText("> P97");
                        }
                        rs.close();
                        instruccion.close();
                    } else {
                        JOptionPane.showMessageDialog(null, "Tienes que rellenar todos los campos",
                        "Otoño Salud", JOptionPane.ERROR_MESSAGE);
                        LPL.setEnabled(false);
                        TFPL.setEnabled(false);
                        TFPLP50.setEnabled(false);
                        LLE.setEnabled(false);
                        LPE.setEnabled(false);
                        LPCE.setEnabled(false);
                        LIE.setEnabled(false);
                        TFIEP50.setEnabled(false);
                        TFIEP.setEnabled(false);
                        RBLE.setEnabled(false);
                        RBPE.setEnabled(false);
                        RBPCE.setEnabled(false);
                        RBIE.setEnabled(false);
                        RBPL.setEnabled(false);
                        TFLongitud.requestFocus();
                        TFLongitud.selectAll();
                    }
            }
        }catch(Exception e) {}
}//GEN-LAST:event_RBWhoActionPerformed

    private void RBLEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBLEActionPerformed
        //DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        if (RBOrbegozo.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoV");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoM");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(1), rs.getDouble(2));
                    seriep50.add(rs.getDouble(1), rs.getDouble(3));
                    seriep97.add(rs.getDouble(1), rs.getDouble(4));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFLongitud.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Longitud / Edad",
                        "Edad","Longitud",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBCDC.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep5 = new XYSeries("P5");
                XYSeries seriep10 = new XYSeries("P10");
                XYSeries seriep25 = new XYSeries("P25");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep75 = new XYSeries("P75");
                XYSeries seriep90 = new XYSeries("P90");
                XYSeries seriep95 = new XYSeries("P95");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(3));
                    seriep5.add(rs.getDouble(2), rs.getDouble(4));
                    seriep10.add(rs.getDouble(2), rs.getDouble(5));
                    seriep25.add(rs.getDouble(2), rs.getDouble(6));
                    seriep50.add(rs.getDouble(2), rs.getDouble(7));
                    seriep75.add(rs.getDouble(2), rs.getDouble(8));
                    seriep90.add(rs.getDouble(2), rs.getDouble(9));
                    seriep95.add(rs.getDouble(2), rs.getDouble(10));
                    seriep97.add(rs.getDouble(2), rs.getDouble(11));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep5);
                juegoDatos.addSeries(seriep10);
                juegoDatos.addSeries(seriep25);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep75);
                juegoDatos.addSeries(seriep90);
                juegoDatos.addSeries(seriep95);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFLongitud.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Longitud / Edad",
                        "Edad","Longitud",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, false);
                renderer.setSeriesShapesVisible(6, false);
                renderer.setSeriesShapesVisible(7, false);
                renderer.setSeriesShapesVisible(8, false);
                renderer.setSeriesShapesVisible(9, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBWho.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep15 = new XYSeries("P15");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(3));
                    seriep15.add(rs.getDouble(2), rs.getDouble(4));
                    seriep50.add(rs.getDouble(2), rs.getDouble(5));
                    seriep85.add(rs.getDouble(2), rs.getDouble(6));
                    seriep97.add(rs.getDouble(2), rs.getDouble(7));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep15);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep97);
                serieInt.add(Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFLongitud.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Longitud / Edad",
                        "Edad","Longitud",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }

        } else
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fuente de archivos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_RBLEActionPerformed

    private void RBPCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBPCEActionPerformed
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        if (RBOrbegozo.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoV");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoM");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(1), rs.getDouble(8));
                    seriep50.add(rs.getDouble(1), rs.getDouble(9));
                    seriep97.add(rs.getDouble(1), rs.getDouble(10));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPerCra.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Perimetro Craneal / Edad",
                        "Edad","Perimetro C.",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBCDC.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep5 = new XYSeries("P5");
                XYSeries seriep10 = new XYSeries("P10");
                XYSeries seriep25 = new XYSeries("P25");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep75 = new XYSeries("P75");
                XYSeries seriep90 = new XYSeries("P90");
                XYSeries seriep95 = new XYSeries("P95");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(21));
                    seriep5.add(rs.getDouble(2), rs.getDouble(22));
                    seriep10.add(rs.getDouble(2), rs.getDouble(23));
                    seriep25.add(rs.getDouble(2), rs.getDouble(24));
                    seriep50.add(rs.getDouble(2), rs.getDouble(25));
                    seriep75.add(rs.getDouble(2), rs.getDouble(26));
                    seriep90.add(rs.getDouble(2), rs.getDouble(27));
                    seriep95.add(rs.getDouble(2), rs.getDouble(28));
                    seriep97.add(rs.getDouble(2), rs.getDouble(29));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep5);
                juegoDatos.addSeries(seriep10);
                juegoDatos.addSeries(seriep25);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep75);
                juegoDatos.addSeries(seriep90);
                juegoDatos.addSeries(seriep95);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPerCra.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Perimetro Craneal / Edad",
                        "Edad","Perimetro C.",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, false);
                renderer.setSeriesShapesVisible(6, false);
                renderer.setSeriesShapesVisible(7, false);
                renderer.setSeriesShapesVisible(8, false);
                renderer.setSeriesShapesVisible(9, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }

        } else if (RBWho.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep15 = new XYSeries("P15");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(18));
                    seriep15.add(rs.getDouble(2), rs.getDouble(19));
                    seriep50.add(rs.getDouble(2), rs.getDouble(20));
                    seriep85.add(rs.getDouble(2), rs.getDouble(21));
                    seriep97.add(rs.getDouble(2), rs.getDouble(22));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep15);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep97);
                serieInt.add(Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPerCra.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Perimetro Craneal / Edad",
                        "Edad","Perimetro C.",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fuente de archivos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_RBPCEActionPerformed

    private void RBPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBPEActionPerformed
        if (RBOrbegozo.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoV");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoM");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(1), rs.getDouble(5));
                    seriep50.add(rs.getDouble(1), rs.getDouble(6));
                    seriep97.add(rs.getDouble(1), rs.getDouble(7));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPeso.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Peso / Edad",
                        "Edad","Peso",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBCDC.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep5 = new XYSeries("P5");
                XYSeries seriep10 = new XYSeries("P10");
                XYSeries seriep25 = new XYSeries("P25");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep75 = new XYSeries("P75");
                XYSeries seriep90 = new XYSeries("P90");
                XYSeries seriep95 = new XYSeries("P95");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(12));
                    seriep5.add(rs.getDouble(2), rs.getDouble(13));
                    seriep10.add(rs.getDouble(2), rs.getDouble(14));
                    seriep25.add(rs.getDouble(2), rs.getDouble(15));
                    seriep50.add(rs.getDouble(2), rs.getDouble(16));
                    seriep75.add(rs.getDouble(2), rs.getDouble(17));
                    seriep90.add(rs.getDouble(2), rs.getDouble(18));
                    seriep95.add(rs.getDouble(2), rs.getDouble(19));
                    seriep97.add(rs.getDouble(2), rs.getDouble(20));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep5);
                juegoDatos.addSeries(seriep10);
                juegoDatos.addSeries(seriep25);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep75);
                juegoDatos.addSeries(seriep90);
                juegoDatos.addSeries(seriep95);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPeso.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Peso / Edad",
                        "Edad","Peso",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, false);
                renderer.setSeriesShapesVisible(6, false);
                renderer.setSeriesShapesVisible(7, false);
                renderer.setSeriesShapesVisible(8, false);
                renderer.setSeriesShapesVisible(9, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBWho.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep15 = new XYSeries("P15");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(8));
                    seriep15.add(rs.getDouble(2), rs.getDouble(9));
                    seriep50.add(rs.getDouble(2), rs.getDouble(10));
                    seriep85.add(rs.getDouble(2), rs.getDouble(11));
                    seriep97.add(rs.getDouble(2), rs.getDouble(12));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep15);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep97);
                serieInt.add(Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFPeso.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Peso / Edad",
                        "Edad","Peso",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fuente de archivos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_RBPEActionPerformed

    private void RBIEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBIEActionPerformed
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        if (RBOrbegozo.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoV");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaOrbegozoM");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep95 = new XYSeries("P95");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(1), rs.getDouble(11));
                    seriep50.add(rs.getDouble(1), rs.getDouble(12));
                    seriep85.add(rs.getDouble(1), rs.getDouble(13));
                    seriep95.add(rs.getDouble(1), rs.getDouble(14));
                    seriep97.add(rs.getDouble(1), rs.getDouble(15));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep95);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFIMC.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("I.M.C. / Edad",
                        "Edad","I.M.C.",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else if (RBCDC.isSelected()) {

        } else if (RBWho.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOV1");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOM1");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep15 = new XYSeries("P15");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(13));
                    seriep15.add(rs.getDouble(2), rs.getDouble(14));
                    seriep50.add(rs.getDouble(2), rs.getDouble(15));
                    seriep85.add(rs.getDouble(2), rs.getDouble(16));
                    seriep97.add(rs.getDouble(2), rs.getDouble(17));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep15);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep97);
                serieInt.add(Double.parseDouble(Integer.toString(calcularMeses(TFFechNac.getText()))), Double.parseDouble(TFIMC.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("I.M.C. / Edad",
                        "Edad","I.M.C.",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }
        } else
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fuente de archivos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_RBIEActionPerformed

    private void RBPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBPLActionPerformed
        if (RBCDC.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCV2");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaCDCM2");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep5 = new XYSeries("P5");
                XYSeries seriep10 = new XYSeries("P10");
                XYSeries seriep25 = new XYSeries("P25");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep75 = new XYSeries("P75");
                XYSeries seriep90 = new XYSeries("P90");
                XYSeries seriep95 = new XYSeries("P95");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(3));
                    seriep5.add(rs.getDouble(2), rs.getDouble(4));
                    seriep10.add(rs.getDouble(2), rs.getDouble(5));
                    seriep25.add(rs.getDouble(2), rs.getDouble(6));
                    seriep50.add(rs.getDouble(2), rs.getDouble(7));
                    seriep75.add(rs.getDouble(2), rs.getDouble(8));
                    seriep90.add(rs.getDouble(2), rs.getDouble(9));
                    seriep95.add(rs.getDouble(2), rs.getDouble(10));
                    seriep97.add(rs.getDouble(2), rs.getDouble(11));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep5);
                juegoDatos.addSeries(seriep10);
                juegoDatos.addSeries(seriep25);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep75);
                juegoDatos.addSeries(seriep90);
                juegoDatos.addSeries(seriep95);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(TFLongitud.getText().trim()), Double.parseDouble(TFPeso.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Peso / Longitud",
                        "Longitud","Peso",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, false);
                renderer.setSeriesShapesVisible(6, false);
                renderer.setSeriesShapesVisible(7, false);
                renderer.setSeriesShapesVisible(8, false);
                renderer.setSeriesShapesVisible(9, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }

        } else if (RBWho.isSelected()) {
            try {
                ResultSet rs=null;
                if (RBVaron.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOV2");
                else if (RBHembra.isSelected())
                    rs = instruccion.executeQuery("Select * from InfaWHOM2");
                XYSeries seriep3 = new XYSeries("P3");
                XYSeries seriep15 = new XYSeries("P15");
                XYSeries seriep50 = new XYSeries("P50");
                XYSeries seriep85 = new XYSeries("P85");
                XYSeries seriep97 = new XYSeries("P97");
                XYSeries serieInt = new XYSeries("Perc");
                while (rs.next()) {
                    seriep3.add(rs.getDouble(2), rs.getDouble(3));
                    seriep15.add(rs.getDouble(2), rs.getDouble(4));
                    seriep50.add(rs.getDouble(2), rs.getDouble(5));
                    seriep85.add(rs.getDouble(2), rs.getDouble(6));
                    seriep97.add(rs.getDouble(2), rs.getDouble(7));
                }
                rs.close();
                instruccion.close();
                XYSeriesCollection juegoDatos= new XYSeriesCollection();
                juegoDatos.addSeries(seriep3);
                juegoDatos.addSeries(seriep15);
                juegoDatos.addSeries(seriep50);
                juegoDatos.addSeries(seriep85);
                juegoDatos.addSeries(seriep97);
                serieInt.add( Double.parseDouble(TFLongitud.getText().trim()), Double.parseDouble(TFPeso.getText().trim()));
                juegoDatos.addSeries(serieInt);

                JFreeChart chart = ChartFactory.createXYLineChart         ("Peso / Longitud",
                        "Longitud","Peso",juegoDatos,PlotOrientation.VERTICAL,
                        true,
                        true,
                        true                // Show legend
                        );

                XYPlot plot =  (XYPlot) chart.getPlot();
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
                //Puntos en las líneas o no
                renderer.setSeriesShapesVisible(0, false);
                renderer.setSeriesShapesVisible(1, false);
                renderer.setSeriesShapesVisible(2, false);
                renderer.setSeriesShapesVisible(3, false);
                renderer.setSeriesShapesVisible(4, false);
                renderer.setSeriesShapesVisible(5, true);

                try {
                    ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), chart, 300, 300);
                } catch (Exception ex) {
                    System.out.println(ex);
                }

                File nombreFich = new File("grafico.jpg");

                cargarImagen(DPImagen, nombreFich);


            } catch (Exception ex) {
                System.out.println(ex);
            }

        } else
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fuente de archivos",
                    "Otoño Salud", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_RBPLActionPerformed


    public  void cargarImagen(javax.swing.JDesktopPane jDeskp,File fileImagen)
    {
        try{
            BufferedImage image = ImageIO.read(fileImagen);
              jDeskp.setBorder(new PintaImagen(image)); }
        catch (Exception e){   System.out.println("No cargo imagen, sorry");   }
    }




    

public static int calcularEdad(String fecha){
         String datetext = fecha;
         try {
             Calendar birth = new GregorianCalendar();
             Calendar today = new GregorianCalendar();
             int age = 0;
             int factor = 0;
             Date birthDate = new SimpleDateFormat("dd/MM/yyyy").parse(datetext);
             Date currentDate = new Date(); //current date
             birth.setTime(birthDate);
             today.setTime(currentDate);    

             if(today.get(Calendar.MONTH) <= birth.get(Calendar.MONTH)){
                 if(today.get(Calendar.MONTH) == birth.get(Calendar.MONTH)){
                     if(today.get(Calendar.DATE) > birth.get(Calendar.DATE)) {
                         factor = -1; //Aun no celebra su cumpleaños
                     }
                 }else{
                     factor = -1; //Aun no celebra su cumpleaños
                 }
             }
             age =(today.get(Calendar.YEAR) - birth.get(Calendar.YEAR) )+ factor;

             return age;
         } catch (Exception e) {
             return -1;
         }
}

public static int calcularMeses (String fecha) throws ParseException {
    String datetext = fecha;
    Calendar birth = new GregorianCalendar();
    Calendar today = new GregorianCalendar();
    int meses = 0;
    Date birthDate = new SimpleDateFormat("dd/MM/yyyy").parse(datetext);
    Date currentDate = new Date(); //current date
    birth.setTime(birthDate);
    today.setTime(currentDate);
    meses = (today.get(Calendar.YEAR) - birth.get(Calendar.YEAR) ) *12;
    meses = meses + (today.get(Calendar.MONTH) - birth.get(Calendar.MONTH));
    return meses;
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCerrar;
    private javax.swing.ButtonGroup BGGrafico;
    private javax.swing.ButtonGroup BGPaper;
    private javax.swing.ButtonGroup BGSexo;
    private javax.swing.JButton BGuardar2;
    private javax.swing.JDesktopPane DPImagen;
    private javax.swing.JLabel LIE;
    private javax.swing.JLabel LINIE;
    private javax.swing.JLabel LINLE;
    private javax.swing.JLabel LINLP;
    private javax.swing.JLabel LINPCE;
    private javax.swing.JLabel LINPE;
    private javax.swing.JLabel LLE;
    private javax.swing.JLabel LPCE;
    private javax.swing.JLabel LPE;
    private javax.swing.JLabel LPL;
    private javax.swing.JPanel PGrafico;
    private javax.swing.JRadioButton RBCDC;
    private javax.swing.JRadioButton RBHembra;
    private javax.swing.JRadioButton RBIE;
    private javax.swing.JRadioButton RBLE;
    private javax.swing.JRadioButton RBOrbegozo;
    private javax.swing.JRadioButton RBPCE;
    private javax.swing.JRadioButton RBPE;
    private javax.swing.JRadioButton RBPL;
    private javax.swing.JRadioButton RBVaron;
    private javax.swing.JRadioButton RBWho;
    private javax.swing.JTextField TFCod;
    private javax.swing.JTextField TFEdad;
    private javax.swing.JTextField TFFechNac;
    private javax.swing.JTextField TFIEP;
    private javax.swing.JTextField TFIEP50;
    private javax.swing.JTextField TFIMC;
    private javax.swing.JTextField TFLEP;
    private javax.swing.JTextField TFLEP50;
    private javax.swing.JTextField TFLongitud;
    private javax.swing.JTextField TFNombre;
    private javax.swing.JTextField TFPCEP;
    private javax.swing.JTextField TFPCEP50;
    private javax.swing.JTextField TFPEP50;
    private javax.swing.JTextField TFPL;
    private javax.swing.JTextField TFPLP50;
    private javax.swing.JTextField TFPPE;
    private javax.swing.JTextField TFPerCra;
    private javax.swing.JTextField TFPeso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables

}





